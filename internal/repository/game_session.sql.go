// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: game_session.sql

package repository

import (
	"context"
	"time"
)

const createAnonymousSession = `-- name: CreateAnonymousSession :one

INSERT INTO game_session (
    width, height, mine_count, "unique", dead, won, "state"
) 
VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING game_session_id, "state", started_at
`

type CreateAnonymousSessionParams struct {
	Width     int32  `json:"width"`
	Height    int32  `json:"height"`
	MineCount int32  `json:"mine_count"`
	Unique    bool   `json:"unique"`
	Dead      bool   `json:"dead"`
	Won       bool   `json:"won"`
	State     []byte `json:"-"`
}

type CreateAnonymousSessionRow struct {
	GameSessionID int64     `json:"game_session_id"`
	State         []byte    `json:"-"`
	StartedAt     time.Time `json:"started_at"`
}

func (q *Queries) CreateAnonymousSession(ctx context.Context, arg CreateAnonymousSessionParams) (CreateAnonymousSessionRow, error) {
	row := q.db.QueryRow(ctx, createAnonymousSession,
		arg.Width,
		arg.Height,
		arg.MineCount,
		arg.Unique,
		arg.Dead,
		arg.Won,
		arg.State,
	)
	var i CreateAnonymousSessionRow
	err := row.Scan(&i.GameSessionID, &i.State, &i.StartedAt)
	return i, err
}

const createPlayerSession = `-- name: CreatePlayerSession :one

INSERT INTO game_session (
    player_id, width, height, mine_count, "unique", dead, won, "state"
) 
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING game_session_id, "state", started_at
`

type CreatePlayerSessionParams struct {
	PlayerID  *int64 `json:"player_id"`
	Width     int32  `json:"width"`
	Height    int32  `json:"height"`
	MineCount int32  `json:"mine_count"`
	Unique    bool   `json:"unique"`
	Dead      bool   `json:"dead"`
	Won       bool   `json:"won"`
	State     []byte `json:"-"`
}

type CreatePlayerSessionRow struct {
	GameSessionID int64     `json:"game_session_id"`
	State         []byte    `json:"-"`
	StartedAt     time.Time `json:"started_at"`
}

func (q *Queries) CreatePlayerSession(ctx context.Context, arg CreatePlayerSessionParams) (CreatePlayerSessionRow, error) {
	row := q.db.QueryRow(ctx, createPlayerSession,
		arg.PlayerID,
		arg.Width,
		arg.Height,
		arg.MineCount,
		arg.Unique,
		arg.Dead,
		arg.Won,
		arg.State,
	)
	var i CreatePlayerSessionRow
	err := row.Scan(&i.GameSessionID, &i.State, &i.StartedAt)
	return i, err
}

const getSession = `-- name: GetSession :one

SELECT game_session_id, player_id, width, height, mine_count, "unique", dead, won, started_at, ended_at, state, created_at, updated_at FROM game_session 
WHERE game_session_id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, gameSessionID int64) (GameSession, error) {
	row := q.db.QueryRow(ctx, getSession, gameSessionID)
	var i GameSession
	err := row.Scan(
		&i.GameSessionID,
		&i.PlayerID,
		&i.Width,
		&i.Height,
		&i.MineCount,
		&i.Unique,
		&i.Dead,
		&i.Won,
		&i.StartedAt,
		&i.EndedAt,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec

UPDATE game_session
SET dead = $1,
    won = $2,
    ended_at = $3,
    "state" = $4
WHERE game_session_id = $5
`

type UpdateSessionParams struct {
	Dead          bool       `json:"dead"`
	Won           bool       `json:"won"`
	EndedAt       *time.Time `json:"ended_at"`
	State         []byte     `json:"-"`
	GameSessionID int64      `json:"game_session_id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession,
		arg.Dead,
		arg.Won,
		arg.EndedAt,
		arg.State,
		arg.GameSessionID,
	)
	return err
}
